{
  "openapi" : "3.0.1",
  "info" : {
    "version" : "0.1",
    "title" : "AM API",
    "description" : "AM API",
    "contact" : {
      "url" : "https://am.c4r.eu/support",
      "email" : "support@am.c4r.eu"
    }
  },
  "servers" : [ {
    "url" : "https://{environment}/api",
    "description" : "The API server.",
    "variables" : {
      "environment" : {
        "default" : "c4r-am.jbs.com.ua",
        "enum" : [ "c4r-am.jbs.com.ua", "eu.c4r.am" ],
        "description" : "This value is assigned by the service provider."
      }
    }
  } ],
  "tags" : [ {
    "name" : "Rules tree"
  }, {
    "name" : "Group of rules"
  }, {
    "name" : "Rules"
  }, {
    "name" : "UI view definition",
    "description" : "Getting UI components definitions"
  }, {
    "name" : "Profile UI config",
    "description" : "User related UI configuration"
  }, {
    "name" : "Store groups",
    "description" : "Store groups management"
  }, {
    "name" : "Store hierarchy"
  }, {
    "name" : "Product category"
  }, {
    "name" : "Product hierarchy"
  }, {
    "name" : "Attribute filters"
  }, {
    "name" : "Reports"
  }, {
    "name" : "Users"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "paths" : {
    "/msrulestree/{treeType}/nodes" : {
      "get" : {
        "tags" : [ "Rules tree" ],
        "description" : "Gets fist level list of tree rule nodes (groups).\n\nIn case of `forceExpandAll` is `true` then all tree will be returned (**all nodes with nested childrens**).\n",
        "parameters" : [ {
          "in" : "path",
          "name" : "treeType",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "basic", "categorical", "product" ],
            "example" : "basic"
          },
          "description" : "The min stock group/rule type."
        }, {
          "$ref" : "#/components/parameters/Sort"
        }, {
          "in" : "query",
          "name" : "forceExpandAll",
          "allowEmptyValue" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "example" : true
          }
        }, {
          "in" : "query",
          "name" : "name.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "product.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "coef.equal",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        }, {
          "in" : "query",
          "name" : "percent.equal",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        }, {
          "in" : "query",
          "name" : "priority.equal",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule tree are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/BasicGroupRuleTreeTableRow"
                    }, {
                      "$ref" : "#/components/schemas/CategoricalGroupRuleTreeTableRow"
                    }, {
                      "$ref" : "#/components/schemas/ProductGroupRuleTreeTableRow"
                    } ]
                  }
                },
                "example" : [ {
                  "id" : 10,
                  "typeKey" : "MsRuleGroup.Product",
                  "cellValues" : {
                    "id" : 10,
                    "name" : "основные"
                  },
                  "rowData" : {
                    "childrenTotal" : 4,
                    "validFor" : {
                      "from" : "2012-08-03T00:00:00.000Z",
                      "to" : "2099-08-03T00:00:00.000Z"
                    },
                    "expired" : false,
                    "storeRef" : {
                      "typeKey" : "ObjectRef.Single",
                      "paths" : [ {
                        "id" : 333,
                        "typeKey" : "StoreSubgroup",
                        "name" : "Эконом",
                        "parentPath" : {
                          "id" : 22,
                          "typeKey" : "StoreGroup",
                          "name" : "Сегмент"
                        }
                      } ]
                    }
                  },
                  "children" : [ {
                    "id" : 10,
                    "typeKey" : "MsRule.Product",
                    "cellValues" : {
                      "id" : 10,
                      "name" : "соки",
                      "product" : "Сок Galicia яблочно-грушевый",
                      "coef" : 2,
                      "params" : {
                        "inUse" : true,
                        "useRounding" : false
                      },
                      "constrains" : {
                        "useYFacings" : true,
                        "useTopLayer" : true,
                        "useDepthCapacityLimit" : false
                      }
                    }
                  }, {
                    "id" : 20,
                    "typeKey" : "MsRule.Product",
                    "cellValues" : {
                      "id" : 20,
                      "name" : "вода",
                      "product" : "Вода БонБуассон мин слаб/газ 2л",
                      "coef" : 1,
                      "params" : {
                        "inUse" : true,
                        "useRounding" : false
                      },
                      "constrains" : {
                        "useYFacings" : true,
                        "useTopLayer" : true,
                        "useDepthCapacityLimit" : false
                      }
                    }
                  }, {
                    "id" : 30,
                    "typeKey" : "MsRule.Product",
                    "cellValues" : {
                      "id" : 30,
                      "name" : "вода",
                      "product" : "Вода Боржоми сильногазированная лечебно-столовая 0,5л",
                      "coef" : 4,
                      "params" : {
                        "inUse" : true,
                        "useRounding" : true
                      },
                      "constrains" : {
                        "useYFacings" : false,
                        "useTopLayer" : false,
                        "useDepthCapacityLimit" : false
                      }
                    }
                  }, {
                    "id" : 40,
                    "typeKey" : "MsRule.Product",
                    "cellValues" : {
                      "id" : 40,
                      "name" : "вафли",
                      "product" : "Вафлі Артек класичні Домашне свято 70г",
                      "coef" : 4,
                      "params" : {
                        "inUse" : true,
                        "useRounding" : true
                      },
                      "constrains" : {
                        "useYFacings" : false,
                        "useTopLayer" : false,
                        "useDepthCapacityLimit" : false
                      }
                    }
                  } ]
                }, {
                  "id" : 20,
                  "typeKey" : "MsRuleGroup.Product",
                  "cellValues" : {
                    "id" : 20,
                    "name" : "другие"
                  },
                  "rowData" : {
                    "childrenTotal" : 0,
                    "validFor" : {
                      "from" : "2012-08-03T00:00:00.000Z",
                      "to" : "2018-08-03T00:00:00.000Z"
                    },
                    "expired" : true,
                    "storeRef" : {
                      "total" : 123,
                      "typeKey" : "ObjectRef.Multiple",
                      "paths" : [ {
                        "id" : 1,
                        "typeKey" : "Store",
                        "name" : "499",
                        "parentPath" : {
                          "id" : 1,
                          "typeKey" : "Store",
                          "key" : "ул. Ломаносова, 73а",
                          "name" : "ул. Ломаносова, 73а",
                          "parentPath" : {
                            "id" : 1,
                            "typeKey" : "Store",
                            "key" : "Голосеевский",
                            "name" : "Голосеевский",
                            "parentPath" : {
                              "id" : 1,
                              "typeKey" : "Store",
                              "key" : "Киев",
                              "name" : "Киев"
                            }
                          }
                        }
                      }, {
                        "id" : 2,
                        "typeKey" : "Store",
                        "name" : "198",
                        "parentPath" : {
                          "id" : 2,
                          "typeKey" : "Store",
                          "key" : "ул. Киевский Шлях, 2/6",
                          "name" : "ул. Киевский Шлях, 2/6",
                          "parentPath" : {
                            "id" : 2,
                            "typeKey" : "Store",
                            "key" : "Борисполь",
                            "name" : "Борисполь"
                          }
                        }
                      } ]
                    }
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/msrulegroups" : {
      "get" : {
        "parameters" : [ {
          "in" : "query",
          "name" : "typeKey",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "required" : false,
          "name" : "view",
          "schema" : {
            "type" : "string",
            "enum" : [ "preview", "shortview", "listview" ],
            "default" : "preview"
          }
        } ],
        "tags" : [ "Group of rules" ],
        "operationId" : "getMsRuleGroupsList",
        "summary" : "Get rules groups list.",
        "description" : "Get a group of rules list.\n",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule groups are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRuleGroup"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  },
                  "example" : [ {
                    "id" : 10,
                    "name" : "Group-A",
                    "typeKey" : "MsRuleGroup.Basic"
                  }, {
                    "id" : 20,
                    "name" : "Group-B",
                    "typeKey" : "MsRuleGroup.Basic"
                  } ]
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "post" : {
        "tags" : [ "Group of rules" ],
        "operationId" : "createMsRuleGroup",
        "summary" : "Create a group of rules.",
        "description" : "Create a new rule group.\n",
        "requestBody" : {
          "description" : "Rule group object to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/BasicMsRuleGroup"
                }, {
                  "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                }, {
                  "$ref" : "#/components/schemas/ProductMsRuleGroup"
                } ],
                "discriminator" : {
                  "propertyName" : "typeKey"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - The request was successful and the resource is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRuleGroup"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  }
                }
              }
            },
            "links" : {
              "edit" : {
                "$ref" : "#/components/links/GetMsRuleGroupById"
              }
            },
            "headers" : {
              "Location" : {
                "$ref" : "#/components/headers/Location"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/msrulegroups/{id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "number",
          "format" : "int32",
          "example" : 123
        },
        "description" : "The min stock rules group id."
      } ],
      "get" : {
        "tags" : [ "Group of rules" ],
        "operationId" : "getMsRuleGroup",
        "summary" : "Get a group of rules.",
        "description" : "Get a group of rules by id.\n",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rules group are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRuleGroup"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  }
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "put" : {
        "tags" : [ "Group of rules" ],
        "operationId" : "updateMsRuleGroup",
        "summary" : "Update a group of rules.",
        "description" : "Update a group of rules by id.\n",
        "requestBody" : {
          "description" : "Rule group object to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/BasicMsRuleGroup"
                }, {
                  "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                }, {
                  "$ref" : "#/components/schemas/ProductMsRuleGroup"
                } ],
                "discriminator" : {
                  "propertyName" : "typeKey"
                },
                "example" : {
                  "id" : 14,
                  "typeKey" : "MsRuleGroup.Basic",
                  "name" : "11",
                  "validFor" : {
                    "from" : "2017-07-21T17:32:28Z",
                    "to" : "2012007-21T17:32:28Z"
                  },
                  "priority" : 3
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful and the updated resource is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRuleGroup"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  }
                }
              }
            },
            "links" : {
              "edit" : {
                "$ref" : "#/components/links/GetMsRuleGroupById"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a group of rules.",
        "description" : "Delete a group of rules.\n",
        "tags" : [ "Group of rules" ],
        "operationId" : "deleteRuleGroup",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/msrules" : {
      "post" : {
        "tags" : [ "Rules" ],
        "operationId" : "createMsRule",
        "summary" : "Create a rule.",
        "description" : "Create a new rule.\n",
        "requestBody" : {
          "description" : "Rule object to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/BasicMsRule"
                }, {
                  "$ref" : "#/components/schemas/CategoricalMsRule"
                }, {
                  "$ref" : "#/components/schemas/ProductMsRule"
                } ],
                "discriminator" : {
                  "propertyName" : "typeKey"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - The request was successful and the resource is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRule"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRule"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRule"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  }
                }
              }
            },
            "links" : {
              "edit" : {
                "$ref" : "#/components/links/UpdateMsRule"
              }
            },
            "headers" : {
              "Location" : {
                "$ref" : "#/components/headers/Location"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/msrules/{id}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "id",
        "required" : true,
        "schema" : {
          "type" : "number",
          "format" : "int32",
          "example" : 123
        },
        "description" : "The min stock rule id."
      } ],
      "get" : {
        "tags" : [ "Rules" ],
        "operationId" : "getMsRule",
        "summary" : "Get a rule by id.",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRule"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRule"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRule"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  }
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "put" : {
        "tags" : [ "Rules" ],
        "operationId" : "updateMsRule",
        "summary" : "Update a rule.",
        "requestBody" : {
          "description" : "Rule object to update.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/BasicMsRule"
                }, {
                  "$ref" : "#/components/schemas/CategoricalMsRuleGroup"
                }, {
                  "$ref" : "#/components/schemas/ProductMsRuleGroup"
                } ],
                "discriminator" : {
                  "propertyName" : "typeKey"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful and the updated resource is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/BasicMsRule"
                  }, {
                    "$ref" : "#/components/schemas/CategoricalMsRule"
                  }, {
                    "$ref" : "#/components/schemas/ProductMsRule"
                  } ],
                  "discriminator" : {
                    "propertyName" : "typeKey"
                  },
                  "example" : {
                    "id" : 10,
                    "typeKey" : "MsRule.Basic",
                    "inUse" : true,
                    "useRounding" : true,
                    "useYFacings" : false,
                    "useTopLayer" : false,
                    "useDepthCapacityLimit" : false,
                    "factor" : {
                      "type" : "COEFFICIENT",
                      "value" : 10.5
                    },
                    "group" : {
                      "id" : 8,
                      "typeKey" : "MsRuleGroup.Basic",
                      "name" : "Group-1"
                    },
                    "priority" : 44
                  }
                }
              }
            },
            "links" : {
              "edit" : {
                "$ref" : "#/components/links/GetMsRuleById"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete" : {
        "summary" : "Delete a rule.",
        "description" : "Delete a rule.\n",
        "tags" : [ "Rules" ],
        "operationId" : "deleteRule",
        "responses" : {
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/ui-component-keys" : {
      "get" : {
        "tags" : [ "UI view definition" ],
        "summary" : "Get all UI component keys.",
        "operationId" : "getUiComponentKeys",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the UI component keys are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "example" : [ "TreeTableRuleBasic", "TreeTableRuleCategorical", "TreeTableRuleProduct", "TreeTableStoreGroup", "TreeStore", "TreeProductCategory", "TableProduct", "TreeProduct" ]
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/ui-component-definitions" : {
      "get" : {
        "tags" : [ "UI view definition" ],
        "summary" : "Get all UI component definitions.",
        "operationId" : "getUiComponentDefinitions",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the UI component definitions are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UiComponentDefinition"
                  }
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/ui-component-definitions/{idOrKey}" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/IdOrKeyPath"
      } ],
      "get" : {
        "tags" : [ "UI view definition" ],
        "summary" : "Get UI component definition.",
        "description" : "Get UI component definition by `id` or `key`.",
        "operationId" : "getUiComponentDefinitionByIdOrKey",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the UI component definitions are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UiComponentDefinition"
                  }
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/profiles/{userIdOrMe}/ui-component-configs" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/UserIdOrMePath"
      } ],
      "get" : {
        "tags" : [ "Profile UI config" ],
        "summary" : "Get all users UI component config.",
        "description" : "Get all UI component configs for specified User.\n",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the UI component definitions are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UiComponentConfig"
                  },
                  "304" : null
                }
              }
            },
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "post" : {
        "tags" : [ "Profile UI config" ],
        "operationId" : "createUserUiComponentConfig",
        "summary" : "Create UI component config.",
        "description" : "Create UI component config for specified User.\n",
        "requestBody" : {
          "description" : "UI component config object to create.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UiComponentConfig"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - The request was successful and the resource is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UiComponentConfig"
                }
              }
            },
            "headers" : {
              "Location" : {
                "$ref" : "#/components/headers/Location"
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "409" : {
            "$ref" : "#/components/responses/Conflict"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/profiles/{userIdOrMe}/ui-component-configs/{idOrKey}" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/UserIdOrMePath"
      }, {
        "$ref" : "#/components/parameters/IdOrKeyPath"
      } ],
      "get" : {
        "tags" : [ "Profile UI config" ],
        "summary" : "Get UI component config for user.",
        "description" : "Get UI component config for specified User.\n",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the UI component definitions are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UiComponentConfig",
                  "304" : null
                }
              }
            },
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      },
      "put" : {
        "tags" : [ "Profile UI config" ],
        "operationId" : "updateUiComponentConfig",
        "summary" : "Update UI component config.",
        "description" : "Update UI component config for specified User.\n",
        "requestBody" : {
          "description" : "Update UI component config for specified User.",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UiComponentConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful and the updated resource is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UiComponentConfig"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/store-groups-treetable" : {
      "get" : {
        "tags" : [ "Store groups" ],
        "summary" : "Get all store groups as treetable.",
        "description" : "Gets fist level list of tree store nodes (groups).\n\nIn case of `forceExpandAll` is `true` then all tree will be returned (**all nodes with nested childrens**).\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "forceExpandAll",
          "allowEmptyValue" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "example" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule tree are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StoreGroupTreeTableRow"
                  }
                },
                "example" : [ {
                  "id" : 10,
                  "typeKey" : "StoreGroup",
                  "cellValues" : {
                    "id" : 10,
                    "name" : "сегмент"
                  },
                  "rowData" : {
                    "childrenTotal" : 3,
                    "productCategoryRefs" : [ {
                      "name" : "Батон",
                      "parent" : [ {
                        "name" : "Хлеб",
                        "parent" : [ {
                          "name" : "Пекарня"
                        } ]
                      } ]
                    } ],
                    "unassignedStoreRefs" : [ ]
                  },
                  "children" : [ {
                    "id" : 10,
                    "typeKey" : "StoreSubgroup",
                    "cellValues" : {
                      "id" : 10,
                      "name" : "элит",
                      "description" : "Consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore.",
                      "rowData" : {
                        "storeRefs" : [ {
                          "id" : 111,
                          "storeNumber" : 191,
                          "storeTreeNode" : {
                            "id" : 111,
                            "key" : "пр-т Николая Бажана, 8",
                            "name" : "пр-т Николая Бажана, 8",
                            "parent" : {
                              "id" : 111,
                              "key" : "Дарницкий",
                              "name" : "Дарницкий",
                              "parent" : {
                                "id" : 111,
                                "key" : "Киев",
                                "name" : "Киев"
                              }
                            }
                          }
                        }, {
                          "id" : 222,
                          "storeNumber" : 192,
                          "storeTreeNode" : {
                            "id" : 111,
                            "key" : "ул. Гната Хоткевича, 1а",
                            "name" : "ул. Гната Хоткевича, 1а",
                            "parent" : {
                              "id" : 111,
                              "key" : "Деснянский",
                              "name" : "Деснянский",
                              "parent" : {
                                "id" : 111,
                                "key" : "Киев",
                                "name" : "Киев"
                              }
                            }
                          }
                        }, {
                          "id" : 333,
                          "storeNumber" : 1654,
                          "storeTreeNode" : {
                            "id" : 111,
                            "key" : "пр-т Броварской, 18д",
                            "name" : "пр-т Броварской, 18д",
                            "parent" : {
                              "id" : 111,
                              "key" : "Деснянский",
                              "name" : "Деснянский",
                              "parent" : {
                                "id" : 111,
                                "key" : "Киев",
                                "name" : "Киев"
                              }
                            }
                          }
                        } ]
                      }
                    }
                  }, {
                    "id" : 20,
                    "typeKey" : "StoreSubgroup",
                    "cellValues" : {
                      "id" : 20,
                      "name" : "эконом",
                      "description" : "Enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip."
                    }
                  }, {
                    "id" : 30,
                    "typeKey" : "StoreSubgroup",
                    "cellValues" : {
                      "id" : 30,
                      "name" : "премиум",
                      "product" : "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore."
                    }
                  } ]
                }, {
                  "id" : 20,
                  "typeKey" : "StoreGroup",
                  "cellValues" : {
                    "id" : 20,
                    "name" : "регион"
                  },
                  "rowData" : {
                    "childrenTotal" : 0,
                    "productCategoryRefs" : [ {
                      "id" : 11,
                      "name" : "Батон"
                    } ],
                    "unassignedStoreRefs" : [ {
                      "id" : 20100,
                      "storeNumber" : 2321,
                      "storeTreeNode" : {
                        "id" : 20100,
                        "key" : "ул. Евгения Сверстюка, 4",
                        "name" : "ул. Евгения Сверстюка, 4",
                        "parent" : {
                          "id" : 20100,
                          "key" : "Днепровский",
                          "name" : "Днепровский",
                          "parent" : {
                            "id" : 20100,
                            "key" : "Киев",
                            "name" : "Киев"
                          }
                        }
                      }
                    }, {
                      "id" : 20200,
                      "storeNumber" : 195,
                      "storeTreeNode" : {
                        "id" : 20100,
                        "key" : "пр-т Броварской, 17",
                        "name" : "пр-т Броварской, 17",
                        "parent" : {
                          "id" : 20200,
                          "key" : "Днепровский",
                          "name" : "Днепровский",
                          "parent" : {
                            "id" : 20200,
                            "key" : "Киев",
                            "name" : "Киев"
                          }
                        }
                      }
                    } ]
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/store-groups" : {
      "get" : {
        "tags" : [ "Store groups" ],
        "summary" : "Get store groups."
      },
      "post" : {
        "tags" : [ "Store groups" ],
        "summary" : "Create store group."
      }
    },
    "/store-groups/{id}" : {
      "get" : {
        "tags" : [ "Store groups" ],
        "summary" : "Get store group."
      },
      "put" : {
        "tags" : [ "Store groups" ],
        "summary" : "Update store group."
      },
      "delete" : {
        "tags" : [ "Store groups" ],
        "summary" : "Delete store group."
      }
    },
    "/store-subgroups" : {
      "post" : {
        "tags" : [ "Store groups" ],
        "summary" : "Create store subgroup."
      }
    },
    "/store-subgroups/{id}" : {
      "get" : {
        "tags" : [ "Store groups" ],
        "summary" : "Get store subgroup."
      },
      "put" : {
        "tags" : [ "Store groups" ],
        "summary" : "Update store subgroup."
      },
      "delete" : {
        "tags" : [ "Store groups" ],
        "summary" : "Delete store subgroup."
      }
    },
    "/store-tree-nodes" : {
      "get" : {
        "tags" : [ "Store hierarchy" ],
        "summary" : "Get store hierarchy."
      }
    },
    "/product-category-tree-nodes" : {
      "get" : {
        "tags" : [ "Product category" ],
        "summary" : "Gets category tree root elements.",
        "description" : "Gets fist level list of product category nodes.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "expandToNodes",
          "description" : "Nodes id's list which must be loaded necessarily. If specified then this nodes will be attached as children.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule tree are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TreeTableRow"
                  }
                },
                "example" : [ {
                  "id" : 2874,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 2874,
                    "name" : "NOVUS"
                  },
                  "rowData" : {
                    "childrenTotal" : 6
                  },
                  "children" : [ {
                    "id" : 2875,
                    "typeKey" : "ProductCategoryNode",
                    "cellValues" : {
                      "id" : 2875,
                      "name" : "Food"
                    },
                    "rowData" : {
                      "childrenTotal" : 16
                    }
                  }, {
                    "id" : 2876,
                    "typeKey" : "ProductCategoryNode",
                    "cellValues" : {
                      "id" : 2876,
                      "name" : "Non Food"
                    },
                    "rowData" : {
                      "childrenTotal" : 0
                    }
                  }, {
                    "id" : 5977,
                    "typeKey" : "ProductCategoryNode",
                    "cellValues" : {
                      "id" : 5977,
                      "name" : "Season Zone"
                    },
                    "rowData" : {
                      "childrenTotal" : 1
                    }
                  }, {
                    "id" : 5671,
                    "typeKey" : "ProductCategoryNode",
                    "cellValues" : {
                      "id" : 5671,
                      "name" : "Виробництво"
                    },
                    "rowData" : {
                      "childrenTotal" : 0
                    }
                  }, {
                    "id" : 5430,
                    "typeKey" : "ProductCategoryNode",
                    "cellValues" : {
                      "id" : 5430,
                      "name" : "Касса"
                    },
                    "rowData" : {
                      "childrenTotal" : 0
                    }
                  }, {
                    "id" : 5998,
                    "typeKey" : "ProductCategoryNode",
                    "cellValues" : {
                      "id" : 5998,
                      "name" : "Кафетерій"
                    },
                    "rowData" : {
                      "childrenTotal" : 0
                    }
                  } ]
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/product-category-tree-nodes/{nodeId}/children" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "nodeId",
        "description" : "Product category node id.",
        "required" : true,
        "schema" : {
          "type" : "number",
          "format" : "int64"
        }
      } ],
      "get" : {
        "tags" : [ "Product category" ],
        "summary" : "Gets product category tree node children.",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule tree are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TreeTableRow"
                  }
                },
                "example" : [ {
                  "id" : 2875,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 2875,
                    "name" : "Food"
                  },
                  "rowData" : {
                    "childrenTotal" : 16
                  }
                }, {
                  "id" : 2876,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 2876,
                    "name" : "Non Food"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "id" : 5977,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 5977,
                    "name" : "Season Zone"
                  },
                  "rowData" : {
                    "childrenTotal" : 1
                  }
                }, {
                  "id" : 5671,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 5671,
                    "name" : "Виробництво"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "id" : 5430,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 5430,
                    "name" : "Касса"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "id" : 5998,
                  "typeKey" : "ProductCategoryNode",
                  "cellValues" : {
                    "id" : 5998,
                    "name" : "Кафетерій"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/product-tree-nodes" : {
      "get" : {
        "tags" : [ "Product hierarchy" ],
        "summary" : "Gets product tree nodes.",
        "description" : "Gets fist level list of product tree nodes.\n",
        "parameters" : [ {
          "in" : "query",
          "name" : "expandForUpcs",
          "description" : "Product UPC codes to idetify nodes list which must be loaded necessarily. If specified then this nodes will be attached as children.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "format" : null
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule tree are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TreeTableRow"
                  }
                },
                "example" : [ {
                  "id" : 3,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 3,
                    "name" : "БАКАЛІЯ"
                  },
                  "rowData" : {
                    "childrenTotal" : 22
                  }
                }, {
                  "id" : 4,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 4,
                    "name" : "ВИТРАТНІ МАТЕРІАЛИ"
                  },
                  "rowData" : {
                    "childrenTotal" : 7
                  }
                }, {
                  "id" : 5,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 5,
                    "name" : "КАФЕТЕРІЙ"
                  },
                  "rowData" : {
                    "childrenTotal" : 6
                  }
                }, {
                  "id" : 6,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 6,
                    "name" : "НАПОЇ,ЦИГАРКИ"
                  },
                  "rowData" : {
                    "childrenTotal" : 5
                  }
                }, {
                  "id" : 7,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 7,
                    "name" : "НЕПРОДОВ.ТОВАРИ НЕ ПЕРШОЇ НЕОБХІД"
                  },
                  "rowData" : {
                    "childrenTotal" : 24
                  }
                }, {
                  "id" : 8,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 8,
                    "name" : "НЕПРОДОВОЛЬЧІ ТОВАРИ"
                  },
                  "rowData" : {
                    "childrenTotal" : 25
                  }
                }, {
                  "id" : 9,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 9,
                    "name" : "ПОСЛУГИ"
                  },
                  "rowData" : {
                    "childrenTotal" : 3
                  }
                }, {
                  "id" : 10,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 10,
                    "name" : "ПРОДУКЦІЯ ВЛАСНОГО ВИРОБНИЦТВА"
                  },
                  "rowData" : {
                    "childrenTotal" : 12
                  }
                }, {
                  "id" : 11,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 11,
                    "name" : "ШВИДКОПСУЮЧІ ХАРЧОВІ ТОВАРИ"
                  },
                  "rowData" : {
                    "childrenTotal" : 21
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/product-tree-nodes/{nodeId}/children" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "nodeId",
        "description" : "Product category node id.",
        "required" : true,
        "schema" : {
          "type" : "number",
          "format" : "int64",
          "example" : 9
        }
      } ],
      "get" : {
        "tags" : [ "Product hierarchy" ],
        "summary" : "Gets product tree node children.",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the rule tree are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TreeTableRow"
                  }
                },
                "example" : [ {
                  "id" : 102,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 102,
                    "name" : "ЕКСПЛУАТАЦІЯ"
                  },
                  "rowData" : {
                    "childrenTotal" : 1
                  }
                }, {
                  "id" : 103,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 103,
                    "name" : "ІНШІ ПОСЛУГИ"
                  },
                  "rowData" : {
                    "childrenTotal" : 2
                  }
                }, {
                  "id" : 104,
                  "typeKey" : "ProductTreeNode",
                  "cellValues" : {
                    "id" : 104,
                    "name" : "ПОСЛУГИ ІНФО-ЦЕНТРА"
                  },
                  "rowData" : {
                    "childrenTotal" : 2
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/product-tree-nodes/{nodeId}/products" : {
      "parameters" : [ {
        "in" : "path",
        "required" : true,
        "name" : "nodeId",
        "description" : "Products tree hierarchy node id.",
        "schema" : {
          "type" : "number",
          "format" : "int64"
        }
      } ],
      "get" : {
        "operationId" : "getTreeNodeProducts",
        "tags" : [ "Product hierarchy" ],
        "summary" : "Gets products of the tree node (pagination + sorting + filtering).",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Page"
        }, {
          "$ref" : "#/components/parameters/PageSize"
        }, {
          "$ref" : "#/components/parameters/Sort"
        }, {
          "in" : "query",
          "name" : "upc.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "name.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "manufacturer.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "brand.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descA.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descB.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descC.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descD.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descE.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descF.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descG.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descH.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descI.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "descJ.contains",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Products list of product tree node",
            "links" : {
              "next" : {
                "description" : "The link relation for the immediate next page of results (returns only if next page exist).",
                "operationId" : "getTreeNodeProducts",
                "parameters" : {
                  "page" : "$response.header.X-Next-Page",
                  "size" : "$response.header.X-Per-Page"
                }
              },
              "prev" : {
                "description" : "The link relation for the immediate previous page of results (returns only if previous page exist).",
                "operationId" : "getTreeNodeProducts",
                "parameters" : {
                  "page" : "$response.header.X-Prev-Page",
                  "size" : "$response.header.X-Per-Page"
                }
              },
              "last" : {
                "description" : "The link relation for the last page of results.",
                "operationId" : "getTreeNodeProducts",
                "parameters" : {
                  "page" : "$response.header.X-Total-Pages",
                  "size" : "$response.header.X-Per-Page"
                }
              },
              "first" : {
                "description" : "The link relation for the first page of results (page numbering base `0`).",
                "operationId" : "getTreeNodeProducts",
                "parameters" : {
                  "page" : 1,
                  "size" : "$response.header.X-Per-Page"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TreeTableRow"
                },
                "example" : [ {
                  "id" : null,
                  "key" : "1000001603",
                  "typeKey" : "Product",
                  "cellValues" : {
                    "upc" : "1000001603",
                    "name" : "Датчик",
                    "manufacturer" : "Без Производителя",
                    "brand" : "Без Бренда",
                    "descA" : "No",
                    "descB" : "No",
                    "descC" : "No",
                    "descD" : "No",
                    "descE" : "No",
                    "descF" : "No",
                    "descG" : "No",
                    "descH" : "No",
                    "descI" : "No",
                    "descJ" : "No"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "key" : "1000001605",
                  "typeKey" : "Product",
                  "cellValues" : {
                    "upc" : "1000001605",
                    "name" : "Захист сканера",
                    "manufacturer" : "Без Производителя",
                    "brand" : "Без Бренда",
                    "descA" : "No",
                    "descB" : "No",
                    "descC" : "No",
                    "descD" : "No",
                    "descE" : "No",
                    "descF" : "No",
                    "descG" : "No",
                    "descH" : "No",
                    "descI" : "No",
                    "descJ" : "No"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "key" : "1000001635",
                  "typeKey" : "Product",
                  "cellValues" : {
                    "upc" : "1000001635",
                    "name" : "Таблетки для чищення",
                    "manufacturer" : "Без Производителя",
                    "brand" : "Без Бренда",
                    "descA" : "No",
                    "descB" : "No",
                    "descC" : "No",
                    "descD" : "No",
                    "descE" : "No",
                    "descF" : "No",
                    "descG" : "No",
                    "descH" : "No",
                    "descI" : "No",
                    "descJ" : "No"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "key" : "1000001636",
                  "typeKey" : "Product",
                  "cellValues" : {
                    "upc" : "1000001636",
                    "name" : "Вогнегасник вуглекислотний",
                    "manufacturer" : "Без Производителя",
                    "brand" : "Без Бренда",
                    "descA" : "No",
                    "descB" : "No",
                    "descC" : "No",
                    "descD" : "No",
                    "descE" : "No",
                    "descF" : "No",
                    "descG" : "No",
                    "descH" : "No",
                    "descI" : "No",
                    "descJ" : "No"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                }, {
                  "key" : "1000001637",
                  "typeKey" : "Product",
                  "cellValues" : {
                    "upc" : "1000001637",
                    "name" : "Піддон для вогнегасника",
                    "manufacturer" : "Без Производителя",
                    "brand" : "Без Бренда",
                    "descA" : "No",
                    "descB" : "No",
                    "descC" : "No",
                    "descD" : "No",
                    "descE" : "No",
                    "descF" : "No",
                    "descG" : "No",
                    "descH" : "No",
                    "descI" : "No",
                    "descJ" : "No"
                  },
                  "rowData" : {
                    "childrenTotal" : 0
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/attribute-filter-definitions" : {
      "get" : {
        "tags" : [ "Attribute filters" ],
        "summary" : "Gets attribute filter definitions.",
        "parameters" : [ {
          "in" : "query",
          "name" : "entitySpecName",
          "required" : false,
          "schema" : {
            "type" : "string",
            "example" : "Product"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the attribute filter definitions are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AttributeFilterDefinition"
                  }
                },
                "example" : [ {
                  "id" : 7,
                  "name" : "Для всех",
                  "typeKey" : "AttributeFilter.Any",
                  "entitySpecification" : {
                    "id" : 3,
                    "name" : "Product"
                  }
                }, {
                  "id" : 8,
                  "name" : "Бренд",
                  "typeKey" : "AttributeFilter.OneOf.Enum",
                  "paramDefinitions" : [ {
                    "id" : 5,
                    "name" : "brand",
                    "paramType" : "String"
                  } ],
                  "charSpec" : {
                    "id" : 4,
                    "name" : "brand",
                    "dataType" : "Enum",
                    "entitySpecification" : {
                      "id" : 3,
                      "name" : "Product"
                    },
                    "srcTable" : "TBLPRODUCTS",
                    "srcColumn" : "BRAND"
                  }
                }, {
                  "id" : 9,
                  "name" : "Производитель",
                  "typeKey" : "AttributeFilter.OneOf.Enum",
                  "paramDefinitions" : [ {
                    "id" : 6,
                    "name" : "manufacturer",
                    "paramType" : "String"
                  } ],
                  "charSpec" : {
                    "id" : 5,
                    "name" : "manufacturer",
                    "dataType" : "Enum",
                    "entitySpecification" : {
                      "id" : 3,
                      "name" : "Product"
                    },
                    "srcTable" : "TBLPRODUCTS",
                    "srcColumn" : "MANUFACTURER"
                  }
                }, {
                  "id" : 10,
                  "name" : "Цена",
                  "typeKey" : "AttributeFilter.Range",
                  "paramDefinitions" : [ {
                    "id" : 7,
                    "name" : "fromPrice",
                    "paramType" : "Double"
                  }, {
                    "id" : 8,
                    "name" : "toPrice",
                    "paramType" : "Double"
                  } ],
                  "charSpec" : {
                    "id" : 6,
                    "name" : "price",
                    "dataType" : "Double",
                    "entitySpecification" : {
                      "id" : 3,
                      "name" : "Product"
                    },
                    "srcTable" : "PRICETABLE?",
                    "srcColumn" : "VALUE?"
                  }
                } ]
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entity-specs/{entitySpecId}/char-specs/{charSpecId}/char-spec-values" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "entitySpecId",
        "description" : "Entity specification id.",
        "schema" : {
          "type" : "number",
          "format" : "int32",
          "example" : 3
        }
      }, {
        "in" : "path",
        "name" : "charSpecId",
        "description" : "Characteristic specification id.",
        "schema" : {
          "type" : "number",
          "format" : "int32",
          "example" : 5
        }
      } ],
      "get" : {
        "tags" : [ "Attribute filters" ],
        "summary" : "Gets characteristic specification values.",
        "responses" : {
          "200" : {
            "description" : "OK - The request was successful, the attribute filter definitions are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CharacteristicSpecValue"
                  }
                }
              }
            }
          },
          "304" : {
            "$ref" : "#/components/responses/NotModified"
          },
          "400" : {
            "$ref" : "#/components/responses/BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/Forbidden"
          },
          "5XX" : {
            "$ref" : "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/reports/{reportKey}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Get report as pagable table or sync excel."
      }
    },
    "/reports-async-tasks" : {
      "post" : {
        "tags" : [ "Reports" ],
        "summary" : "Create export report async task."
      },
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Get export report async tasks list."
      }
    },
    "/reports-async-tasks/{taskId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Get export report async task by id."
      },
      "put" : {
        "tags" : [ "Reports" ],
        "summary" : "Update export report async task."
      }
    },
    "/reports-async-tasks/{taskId}/content" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Get export report async task file content (excel)."
      }
    },
    "/authenticate" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "User login."
      }
    },
    "/auth/token" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Refresh token."
      }
    },
    "/users-treetable" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all users as treetable."
      }
    },
    "/permission-roles" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Create user role with permissions."
      }
    },
    "/permission-roles/{roleId}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get user role with permissions."
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update user role with permissions."
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete user role with permissions."
      }
    },
    "/privileges" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get all system privileges."
      }
    },
    "/am-users/{userId}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get user with role."
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update user."
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Delete user."
      }
    }
  },
  "components" : {
    "schemas" : {
      "PageParamSchema" : {
        "type" : "number",
        "format" : "int32",
        "minimum" : 0,
        "default" : 0,
        "description" : "Page number is `int32`."
      },
      "PageSizeParamSchema" : {
        "type" : "number",
        "format" : "int32",
        "minimum" : 1,
        "description" : "How many items want each page to return."
      },
      "PrevPageParamSchema" : {
        "type" : "number",
        "format" : "int32",
        "minimum" : 0,
        "description" : "Page number is `int32` and starts at `0`."
      },
      "NextPageParamSchema" : {
        "type" : "number",
        "format" : "int32",
        "minimum" : 1,
        "description" : "Page number is `int32` and starts at `0`, so next page always starts from `1`."
      },
      "TotalPagesSchema" : {
        "type" : "number",
        "format" : "int32",
        "minimum" : 0,
        "description" : "Total pages count is `int32` (correspond to page number type)."
      },
      "TotalSchema" : {
        "type" : "number",
        "format" : "int64",
        "minimum" : 0,
        "description" : "Type for total items in list count."
      },
      "TreeTableRow" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64",
            "readOnly" : true
          },
          "key" : {
            "type" : "string",
            "readOnly" : true
          },
          "typeKey" : {
            "type" : "string"
          },
          "rowData" : {
            "$ref" : "#/components/schemas/TreeTableRowData"
          },
          "cellValues" : {
            "type" : "object"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TreeTableRow"
            }
          }
        }
      },
      "TreeTableRowData" : {
        "type" : "object",
        "properties" : {
          "childrenTotal" : {
            "type" : "number",
            "format" : "int32"
          }
        }
      },
      "ValidFor" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "format" : "date-time"
          },
          "to" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MsRuleGroupParamsCell" : {
        "properties" : {
          "inUse" : {
            "type" : "boolean",
            "description" : "Is rule in use flag"
          },
          "useRounding" : {
            "type" : "boolean",
            "description" : "Is use rounding flag"
          }
        }
      },
      "MsRuleGroupConstrainsCell" : {
        "properties" : {
          "useYFacings" : {
            "description" : "Count products in height flag\n",
            "type" : "boolean"
          },
          "useTopLayer" : {
            "description" : "Use shelf top layer flag\n",
            "type" : "boolean"
          },
          "useDepthCapacityLimit" : {
            "description" : "Use shelf depth capacity limit flag\n",
            "type" : "boolean"
          }
        }
      },
      "MsRuleGroupRowData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TreeTableRowData"
        }, {
          "type" : "object",
          "properties" : {
            "validFor" : {
              "$ref" : "#/components/schemas/ValidFor"
            },
            "expired" : {
              "type" : "boolean"
            },
            "storeRef" : {
              "type" : "object",
              "description" : "TODO define type"
            }
          }
        } ]
      },
      "CategoricalMsRuleGroupRowData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRuleGroupRowData"
        }, {
          "type" : "object",
          "properties" : {
            "productCategoryRef" : {
              "type" : "object",
              "description" : "TODO define type"
            }
          }
        } ]
      },
      "BasicGroupRuleTreeTableRow" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TreeTableRow"
        }, {
          "type" : "object",
          "properties" : {
            "rowData" : {
              "$ref" : "#/components/schemas/MsRuleGroupRowData"
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/BasicGroupRuleTreeTableRow"
              }
            }
          }
        } ]
      },
      "ProductGroupRuleTreeTableRow" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BasicGroupRuleTreeTableRow"
        }, {
          "type" : "object",
          "properties" : {
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProductGroupRuleTreeTableRow"
              }
            }
          }
        } ]
      },
      "CategoricalGroupRuleTreeTableRow" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/BasicGroupRuleTreeTableRow"
        }, {
          "type" : "object",
          "properties" : {
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CategoricalGroupRuleTreeTableRow"
              }
            }
          }
        } ]
      },
      "StoreGroupTreeTableRow" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TreeTableRow"
        }, {
          "type" : "object",
          "properties" : {
            "rowData" : {
              "$ref" : "#/components/schemas/StoreGroupRowData"
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/StoreSubgroupTreeTableRow"
              }
            }
          }
        } ]
      },
      "StoreSubgroupTreeTableRow" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TreeTableRow"
        }, {
          "type" : "object",
          "properties" : {
            "rowData" : {
              "$ref" : "#/components/schemas/StoreSubgroupRowData"
            },
            "children" : {
              "type" : "object"
            }
          }
        } ]
      },
      "StoreGroupRowData" : {
        "type" : "object",
        "properties" : {
          "productCategoryRefs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductCategoryNodeRef"
            }
          }
        }
      },
      "StoreSubgroupRowData" : {
        "type" : "object",
        "properties" : {
          "storeRefs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoreRef"
            }
          }
        }
      },
      "MsRuleFactor" : {
        "required" : [ "value", "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "coefficient", "percent" ],
            "default" : "coefficient"
          },
          "value" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "example" : {
          "type" : "coefficient",
          "value" : 12.34
        }
      },
      "PriorityThousand" : {
        "properties" : {
          "priority" : {
            "description" : "Priority from `1` to `999`\n",
            "type" : "number",
            "format" : "int32",
            "minimum" : 1,
            "maximum" : 999
          }
        },
        "example" : {
          "priority" : 12
        }
      },
      "SortParamsSchema" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "example" : [ "id,asc", "name,desc" ]
      },
      "MsRuleGroup" : {
        "type" : "object",
        "required" : [ "typeKey", "id" ],
        "properties" : {
          "id" : {
            "readOnly" : true,
            "type" : "number",
            "format" : "int64",
            "description" : "The group id."
          },
          "typeKey" : {
            "type" : "string",
            "enum" : [ "MsRuleGroup.Basic", "MsRuleGroup.Categorical", "MsRuleGroup.Product" ],
            "description" : "The group type key."
          },
          "name" : {
            "type" : "string",
            "description" : "The group name."
          },
          "validFor" : {
            "$ref" : "#/components/schemas/ValidFor"
          },
          "children" : {
            "readOnly" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MsRule"
            }
          }
        }
      },
      "BasicMsRuleGroup" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRuleGroup"
        }, {
          "type" : "object",
          "properties" : {
            "priority" : {
              "type" : "number",
              "format" : "int32",
              "description" : "Group priority."
            },
            "typeKey" : {
              "type" : "string",
              "enum" : [ "MsRuleGroup.Basic" ]
            }
          }
        } ]
      },
      "CategoricalMsRuleGroup" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRuleGroup"
        }, {
          "type" : "object",
          "properties" : {
            "priority" : {
              "type" : "number",
              "format" : "int32",
              "description" : "Group priority."
            },
            "typeKey" : {
              "type" : "string",
              "enum" : [ "MsRuleGroup.Categorical" ]
            }
          }
        } ]
      },
      "ProductMsRuleGroup" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRuleGroup"
        }, {
          "type" : "object",
          "properties" : {
            "typeKey" : {
              "type" : "string",
              "enum" : [ "MsRuleGroup.Product" ]
            }
          }
        } ]
      },
      "MsRule" : {
        "type" : "object",
        "required" : [ "id", "typeKey" ],
        "properties" : {
          "id" : {
            "readOnly" : true,
            "type" : "number",
            "format" : "int64",
            "description" : "The rule id."
          },
          "typeKey" : {
            "type" : "string",
            "enum" : [ "MsRule.Basic", "MsRule.Categorical", "MsRule.Product" ],
            "description" : "The rule type key.\n"
          },
          "inUse" : {
            "type" : "boolean",
            "description" : "Is rule in use flag\n"
          },
          "useRounding" : {
            "type" : "boolean",
            "description" : "Is use rounding flag\n"
          },
          "useYFacings" : {
            "description" : "Count products in height flag\n",
            "type" : "boolean"
          },
          "useTopLayer" : {
            "description" : "Use shelf top layer flag\n",
            "type" : "boolean"
          },
          "useDepthCapacityLimit" : {
            "description" : "Use shelf depth capacity limit flag\n",
            "type" : "boolean"
          }
        }
      },
      "BasicMsRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRule"
        }, {
          "type" : "object",
          "properties" : {
            "priority" : {
              "type" : "number",
              "format" : "int32",
              "description" : "Rule priority."
            },
            "typeKey" : {
              "type" : "string",
              "enum" : [ "MsRule.Basic" ]
            }
          }
        } ]
      },
      "CategoricalMsRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRule"
        }, {
          "type" : "object",
          "properties" : {
            "priority" : {
              "type" : "number",
              "format" : "int32",
              "description" : "Rule priority."
            },
            "typeKey" : {
              "type" : "string",
              "enum" : [ "MsRule.Categorical" ]
            }
          }
        } ]
      },
      "ProductMsRule" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/MsRule"
        }, {
          "type" : "object",
          "properties" : {
            "typeKey" : {
              "type" : "string",
              "enum" : [ "MsRule.Product" ]
            }
          }
        } ]
      },
      "UiComponentDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "typeKey" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "visible" : {
            "type" : "boolean"
          },
          "itemDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UiItemDefinition"
            }
          }
        }
      },
      "UiItemDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "typeKey" : {
            "type" : "string"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "hidden" : {
            "type" : "boolean"
          },
          "visible" : {
            "type" : "boolean"
          },
          "sortable" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "number",
            "format" : "int32"
          },
          "componentDefinition" : {
            "$ref" : "#/components/schemas/UiComponentDefinition"
          }
        }
      },
      "UiComponentConfig" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "visible" : {
            "type" : "boolean"
          },
          "definition" : {
            "$ref" : "#/components/schemas/UiComponentDefinition"
          },
          "itemConfigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UiItemConfig"
            }
          }
        }
      },
      "UiItemConfig" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "hidden" : {
            "type" : "boolean"
          },
          "visible" : {
            "type" : "boolean"
          },
          "sortable" : {
            "type" : "boolean"
          },
          "order" : {
            "type" : "number",
            "format" : "int32"
          },
          "definition" : {
            "$ref" : "#/components/schemas/UiItemDefinition"
          }
        }
      },
      "ProductCategoryNodeRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "ProductCategoryNode" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCategoryNodeRef"
        } ]
      },
      "StoreRef" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "storeNumber" : {
            "type" : "number",
            "format" : "int32"
          },
          "storeTreeNode" : {
            "$ref" : "#/components/schemas/StoreTreeNode"
          }
        }
      },
      "Store" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/StoreRef"
        } ]
      },
      "StoreTreeNode" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "key" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "parent" : {
            "$ref" : "#/components/schemas/StoreTreeNode"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoreTreeNode"
            }
          },
          "stores" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Store"
            }
          }
        }
      },
      "AttributeFilterDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "typeKey" : {
            "type" : "string",
            "enum" : [ "AttributeFilter.Any", "AttributeFilter.Equals", "AttributeFilter.Range", "AttributeFilter.OneOf.Enum", "AttributeFilter.OneOfOrAny.Enum" ]
          },
          "paramDefinitions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeFilterParamDefinition"
            }
          },
          "charSpec" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/CharacteristicSpecification"
            }, {
              "$ref" : "#/components/schemas/AttributeCharSpec"
            } ]
          },
          "entitySpecification" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/AtomicEntitySpecification"
            } ]
          },
          "dataType" : {
            "$ref" : "#/components/schemas/DataType"
          }
        }
      },
      "AttributeFilterParamDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "paramType" : {
            "$ref" : "#/components/schemas/DataType"
          }
        }
      },
      "EntitySpecification" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "charSpecs" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/AttributeCharSpec"
              } ]
            }
          }
        }
      },
      "AtomicEntitySpecification" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/EntitySpecification"
        } ]
      },
      "CharacteristicSpecification" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "dataType" : {
            "$ref" : "#/components/schemas/DataType"
          }
        }
      },
      "AttributeCharSpec" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CharacteristicSpecification"
        }, {
          "type" : "object",
          "properties" : {
            "srcTable" : {
              "type" : "string"
            },
            "srcColumn" : {
              "type" : "string"
            }
          }
        } ]
      },
      "CharacteristicSpecValue" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "number",
            "format" : "int64"
          },
          "value" : {
            "type" : "object"
          },
          "useAsDefault" : {
            "type" : "boolean",
            "example" : false
          },
          "dataType" : {
            "$ref" : "#/components/schemas/DataType"
          }
        }
      },
      "DataType" : {
        "type" : "string",
        "enum" : [ "String", "Double", "Long", "Boolean", "Date", "Enum" ]
      },
      "Error" : {
        "description" : "API operation error response object",
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Error message description"
          }
        },
        "example" : {
          "message" : "Error description"
        }
      }
    },
    "parameters" : {
      "msRuleType" : {
        "name" : "type",
        "in" : "query",
        "description" : "The min stock rule type.",
        "required" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "basic", "categorical", "product" ],
          "example" : "basic"
        }
      },
      "Page" : {
        "name" : "page",
        "in" : "query",
        "required" : false,
        "description" : "Page number to starts from. \nThat page numbering is `0-based`.\n",
        "schema" : {
          "$ref" : "#/components/schemas/PageParamSchema"
        }
      },
      "PageSize" : {
        "name" : "size",
        "in" : "query",
        "required" : false,
        "description" : "How many items you want each page to return.\n",
        "schema" : {
          "$ref" : "#/components/schemas/PageSizeParamSchema"
        }
      },
      "Sort" : {
        "name" : "sort",
        "in" : "query",
        "required" : false,
        "description" : "Sort fields query.\n",
        "schema" : {
          "$ref" : "#/components/schemas/SortParamsSchema"
        },
        "example" : [ "id,asc", "name,desc" ]
      },
      "IdOrKeyPath" : {
        "name" : "idOrKey",
        "in" : "path",
        "required" : true,
        "description" : "Entity `id` or `key`",
        "schema" : {
          "oneOf" : [ {
            "type" : "number",
            "format" : "int64"
          }, {
            "type" : "string"
          } ]
        }
      },
      "UserIdOrMePath" : {
        "name" : "userIdOrMe",
        "in" : "path",
        "required" : true,
        "description" : "User `id` or `me` to reference on current signed in user.",
        "schema" : {
          "oneOf" : [ {
            "type" : "number",
            "format" : "int64"
          }, {
            "type" : "string",
            "enum" : [ "me" ]
          } ]
        }
      }
    },
    "links" : {
      "GetMsRuleGroupById" : {
        "operationId" : "getMsRuleGroup",
        "parameters" : {
          "id" : "$response.body#/id"
        }
      },
      "GetMsRuleById" : {
        "operationId" : "getMsRule",
        "parameters" : {
          "id" : "$response.body#/id"
        }
      },
      "UpdateMsRule" : {
        "operationId" : "updateMsRule",
        "parameters" : {
          "id" : "$response.body#/id"
        }
      }
    },
    "headers" : {
      "Location" : {
        "description" : "The Location response header indicates the URL to redirect a page to or created resource. It only provides a meaning when served with a 3xx (redirection) or 201 (created) status response.\n",
        "schema" : {
          "type" : "string",
          "example" : "https://c4r-am.jbs.com.ua/v0.1/<resources>/<resourceid>"
        },
        "required" : true
      }
    },
    "responses" : {
      "BadRequest" : {
        "description" : "Error for invalid request details description",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "message" : "Bad request"
            }
          }
        }
      },
      "NotModified" : {
        "description" : "Resource are not modified"
      },
      "Conflict" : {
        "description" : "Conflict - A conflicting resource already exists.\n",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "message" : "Creating a resource with a name already exists."
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Authorization information is missing or invalid",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "message" : "Authorization information is missing or invalid"
            }
          }
        }
      },
      "Forbidden" : {
        "description" : "Access forbidden for getting resource",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "message" : "Access forbidden for getting resource"
            }
          }
        }
      },
      "NotFound" : {
        "description" : "Not Found - The requested resource could not be found.\n",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "message" : "The requested resource could not be found"
            }
          }
        }
      },
      "UnexpectedError" : {
        "description" : "Unexpected error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "message" : "Unexpected error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT",
        "description" : "The JWT token using Bearer scheme for authorization and authentication. The roles for authorization is specified within the token.\n\n### [Example JWT token](https://jwt.io/#debugger-io?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiUk9MRV9DQVRFR09SWV9NQU5BR0VSIiwiaXNzIjoiaHR0cHM6Ly9hbS5jNHIuZXUiLCJoYW5kbGUiOiJiaWdjYXQiLCJ1c2VySWQiOiI0MDAxNjM1NiIsImVtYWlsIjoiYmlnY2F0QGFtLmM0ci5ldSIsImp0aSI6Ijg0NjFhYzNiLWU1NGYtNDE4Zi04YTc3LTQxZGNlZDNmMjRjZCIsImlhdCI6MTUyMzM2NTY4MywiZXhwIjoxNTI4NTQ5NjgzfQ.FDHHiHkw6wGrymvBaqYW7h6nhugKUSAcLUXbClovA9c)\n### Example JWT token raw data:\n```\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiUk9MRV9DQVRFR09SWV9NQU5BR0VSIiwiaXNzIjoiaHR0cHM6Ly9hbS5jNHIuZXUiLCJoYW5kbGUiOiJiaWdjYXQiLCJ1c2VySWQiOiI0MDAxNjM1NiIsImVtYWlsIjoiYmlnY2F0QGFtLmM0ci5ldSIsImp0aSI6Ijg0NjFhYzNiLWU1NGYtNDE4Zi04YTc3LTQxZGNlZDNmMjRjZCIsImlhdCI6MTUyMzM2NTY4MywiZXhwIjoxNTI4NTQ5NjgzfQ.FDHHiHkw6wGrymvBaqYW7h6nhugKUSAcLUXbClovA9c\n```"
      }
    }
  }
}